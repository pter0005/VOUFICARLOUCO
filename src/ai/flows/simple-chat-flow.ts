
'use server';
/**
 * @fileOverview Um fluxo Genkit simples para um chatbot.
 * ATUALMENTE OPERANDO EM MODO LOCAL SIMPLIFICADO (SEM IA EXTERNA).
 *
 * - chatWithAI - Fun√ß√£o que lida com a pergunta do usu√°rio e retorna uma resposta.
 * - ChatInput - O tipo de entrada para a fun√ß√£o chatWithAI.
 * - ChatOutput - O tipo de retorno para a fun√ß√£o chatWithAI.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const ChatInputSchema = z.object({
  question: z.string().min(1, { message: 'A pergunta n√£o pode estar vazia.' }),
});
export type ChatInput = z.infer<typeof ChatInputSchema>;

const ChatOutputSchema = z.object({
  answer: z.string().describe('A resposta gerada.'),
});
export type ChatOutput = z.infer<typeof ChatOutputSchema>;

// Fun√ß√£o principal exportada que ser√° chamada pelo frontend
export async function chatWithAI(input: ChatInput): Promise<ChatOutput> {
  // Valida√ß√£o da entrada
  try {
    ChatInputSchema.parse(input);
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new Error(`Pergunta inv√°lida: ${error.errors.map(e => e.message).join(', ')}`);
    }
    throw new Error('Ocorreu um erro ao processar sua pergunta.');
  }

  // L√≥gica do chatbot local simplificado
  const userAnswer = input.question.toLowerCase();
  let botResponse = `Voc√™ perguntou: "${input.question}". \n\nEu sou um bot de demonstra√ß√£o e minhas respostas s√£o limitadas por enquanto!`;

  if (userAnswer.includes("ol√°") || userAnswer.includes("oi")) {
    botResponse = "Ol√°! Como posso te ajudar hoje (de forma simples)?";
  } else if (userAnswer.includes("como voc√™ est√°")) {
    botResponse = "Estou funcionando, obrigado por perguntar! E voc√™?";
  } else if (userAnswer.includes("adeus") || userAnswer.includes("tchau")) {
    botResponse = "At√© logo! Volte sempre.";
  } else if (userAnswer.includes("obrigado") || userAnswer.includes("obrigada")) {
    botResponse = "De nada! üòä";
  }


  // Simula um pequeno atraso, como se fosse uma chamada de API
  await new Promise(resolve => setTimeout(resolve, 300));

  return { answer: botResponse };
}


// O C√ìDIGO ABAIXO REFERENTE √Ä IA EXTERNA (OpenAI) √â MANTIDO PARA FACILITAR UMA FUTURA REATIVA√á√ÉO,
// MAS N√ÉO EST√Å SENDO UTILIZADO PELA FUN√á√ÉO EXPORTADA chatWithAI.

/*
const chatPromptOpenAI = ai.definePrompt({
  name: 'simpleChatPromptOpenAI',
  input: { schema: ChatInputSchema },
  output: { schema: ChatOutputSchema },
  prompt: `Voc√™ √© um assistente de IA amig√°vel e prestativo.
Responda √† seguinte pergunta do usu√°rio de forma concisa e √∫til:

Pergunta do Usu√°rio:
{{{question}}}

Sua Resposta:
`,
  model: 'openai/gpt-3.5-turbo', // Especifica o modelo OpenAI a ser usado
  config: {
    temperature: 0.7,
  }
});

const chatFlowWithOpenAI = ai.defineFlow(
  {
    name: 'simpleChatFlowOpenAI',
    inputSchema: ChatInputSchema,
    outputSchema: ChatOutputSchema,
  },
  async (input) => {
    try {
      // Verifica se a OPENAI_API_KEY est√° dispon√≠vel antes de tentar chamar o fluxo
      if (!process.env.OPENAI_API_KEY) {
        console.error("Chatbot OpenAI: OPENAI_API_KEY n√£o configurada. Retornando resposta padr√£o.");
        // Nota: Na vers√£o simplificada atual, este fluxo n√£o √© chamado se a chave n√£o estiver presente na fun√ß√£o exportada.
        // Esta verifica√ß√£o aqui seria uma segunda camada se o fluxo fosse chamado diretamente.
        return { answer: "Desculpe, o servi√ßo de chat avan√ßado n√£o est√° configurado corretamente no momento. Verifique as configura√ß√µes da API Key da OpenAI." };
      }
      const { output } = await chatPromptOpenAI(input);
      if (!output || typeof output.answer !== 'string') {
        console.error('Chatbot OpenAI: A IA n√£o retornou uma resposta de texto v√°lida.', output);
        throw new Error('A IA n√£o conseguiu gerar uma resposta ou o formato √© inesperado.');
      }
      return output;
    } catch (error) {
      console.error('Chatbot OpenAI: Erro durante a execu√ß√£o do fluxo de chat:', error);
      if (error instanceof Error && error.message.includes("OPENAI_API_KEY")) {
         throw new Error('Problema com a chave da API OpenAI. Verifique se est√° correta e ativa.');
      }
      if (error instanceof Error && (error.message.toLowerCase().includes("quota") || error.message.toLowerCase().includes("limit"))) {
        throw new Error('Voc√™ excedeu sua cota ou limite de uso com a API OpenAI.');
      }
      throw new Error('Ocorreu um erro ao se comunicar com a IA para o chat.');
    }
  }
);

// Para reativar a IA da OpenAI, a fun√ß√£o chatWithAI deveria chamar chatFlowWithOpenAI(input)
// e a verifica√ß√£o da OPENAI_API_KEY poderia ser centralizada.
*/
